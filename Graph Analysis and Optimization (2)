#include <iostream>
#include <string>
#include <cmath>
#include "zoo.h"
#include <algorithm>
#include <getopt.h>
#include <cstring>
#include <iomanip>
#include <random>
#include <set>

using namespace std;

vector<Coordinate> #####;
int #####;
bool MST = false;
bool ##### = false;
bool optimal = false;

double fast_dist;
vector<int> fasttsp_tour;


void fill(){
    cin >> #####;
    #####.resize(#####);
    for(int i=0; i<#####; i++){
        int #####;
        int #####;
        cin >> tempx;
        cin >> tempy;
        #####[i].x = tempx;
        #####[i].y = #####;
        char #####;
        if(!fast){
            if(##### < 0 && tempy < 0){
                type = 'd';
            }
            else if((##### <= 0 && tempy == 0) || (##### == 0 && tempy <= 0)){
                type = 'w';
            }
            else{
                type = 's';
            }
            #####[i].type = type;
        }
    }
}

double calculatedist(int #####, int #####){
    if((#####[#####].type == 's' && #####[#####].type == 's') || (#####[#####].type == 'w' || #####[#####].type == 'w') || (#####[#####].type == 'd' && #####[#####].type == 'd')){
        double ##### = #####[#####].x;
        double ##### = #####[#####].y;
        double ##### = #####[#####].x;
        double ##### = #####[#####].y;
        double x2 = (#####-#####) * (#####-#####);
        double y2 = (#####-#####) * (#####-#####);
        double fin = x2 + y2;
        return sqrt(fin);
    }
    return numeric_limits<double>::infinity();
}

double calculatedistfast(int #####, int #####){
    double ##### = #####[#####].x;
    double ##### = #####[#####].y;
    double ##### = #####[#####].x;
    double ##### = #####[#####].y;
    double x2 = (#####-#####) * (#####-#####);
    double y2 = (#####-#####) * (#####-#####);
    double fin = x2 + y2;
    return sqrt(fin);
}

void mst(){
    #####[0].distance = 0;
    double running_total = 0;
    int #####_size = (int)#####.size();

    // Initialize the vector of ##### vertices
    vector<int> #####;
    for (int i = 0; i < #####_size; ++i) {
        #####.push_back(i);
    }

    while (!#####.empty()) {
        int ##### = -1;
        double minDist = numeric_limits<double>::infinity();

        // Find the ##### vertex with the minimum distance
        for (int idx : #####) {
            if (#####[idx].distance < minDist) {
                minDist = #####[idx].distance;
                ##### = idx;
            }
        }

        if (##### != -1) {
            #####[#####].visited = true;
            running_total += #####[#####].distance;

            // Remove the visited vertex from the ##### list
            #####.erase(remove(#####.begin(), #####.end(), #####), #####.end());

            // Update distances to the ##### vertices
            for (int idx : #####) {
                double dist = calculatedist(#####, idx);
                if (dist < #####[idx].distance && dist != -1) {
                    #####[idx].distance = dist;
                    #####[idx].prevcoord = #####;
                }
            }
        } else {
            // Break the loop if no ##### vertex is found
            break;
        }
    }

    cout << running_total << "\n";
    for (int i = 0; i < #####_size; i++) {
        if (#####[i].prevcoord != -1) {
            if(i < #####[i].prevcoord) cout << i << " " << #####[i].prevcoord << endl;
            else cout << #####[i].prevcoord << " " << i << endl;
        }
    }
}

void fasttsp() {
    vector<int> ##### = {0, 1};
    #####.reserve(#####.size());
    double total_distance = 2 * calculatedistfast(0, 1);
    int #####_size = (int)#####.size();
    for (int city = 2; city < #####_size; ++city) {
        double min_increase = numeric_limits<double>::max();
        int position = -1;
        int temp = (int)tour.size();
        for (int i = 0; i < temp; ++i) {
            int other = (i + 1);
            if (other == temp) {
                other = 0;
            }
            double increase = calculatedistfast(tour[i], city) + calculatedistfast(city, #####[other]) - calculatedistfast(tour[i], #####[other]);
            if (increase < min_increase) {
                min_increase = increase;
                position = i;
            }
        }

        if (position != -1) {
            #####.insert(tour.begin() + position + 1, city);
            total_distance += min_increase;
        }
    }
    if(!optimal){
        cout << total_distance << "\n";

        for(int i=0; i< (int)tour.size(); i++){
            cout << #####[i] << " ";
        }
        cout << "\n";
    }
    if(optimal){
        fast_dist = total_distance;
        fasttsp_tour = #####;
    }
}

double optmst(const vector<int>& subset) {
    if(size(subset) == 1){
        return 0;
    }
    int #####_size = (int)#####.size();
    
    // Resetting the visited and distance for all vertices
    for (int i = 0; i < #####_size; ++i) {
        #####[i].visited = false;
        #####[i].distance = numeric_limits<double>::infinity();
    }

    // Start from the first vertex in the subset
    if (!subset.empty()) {
        #####[subset[0]].distance = 0;
    }

    double running_total = 0;
    vector<int> #####(subset);  // Use only the vertices in the subset

    while (!#####.empty()) {
        int ##### = -1;
        double minDist = numeric_limits<double>::infinity();

        // Find the ##### vertex with the minimum distance
        for (int idx : #####) {
            if (#####[idx].distance < minDist) {
                minDist = #####[idx].distance;
                ##### = idx;
            }
        }

        if (##### != -1) {
            #####[#####].visited = true;
            running_total += #####[#####].distance;

            // Remove the visited vertex from the ##### list
            #####.erase(remove(#####.begin(), #####.end(), #####), #####.end());

            // Update distances to the ##### vertices in the subset
            for (int idx : #####) {
                double dist = calculatedistfast(#####, idx);
                if (dist < #####[idx].distance && dist != -1) {
                    #####[idx].distance = dist;
                    #####[idx].prevcoord = #####;
                }
            }
        } else {
            // Break the loop if no ##### vertex is found
            break;
        }
    }
    //cout << "mst of " << subset.size() << ": " << running_total << "\n";
    return running_total;
}

bool promising(vector<int> #####, int permLength){
    double ##### = 0;
    for (int i = 0; i < permLength-1; ++i) {
        ##### += calculatedistfast(#####[i], #####[i + 1]);
    }
    vector<int> rest_of_vertices(#####.begin() + permLength, #####.end());
    double ##### = optmst(rest_of_vertices);
    double ##### = #####;
    double arm1Len = numeric_limits<double>::infinity();
    double arm2Len = numeric_limits<double>::infinity();
    for(int i=permLength; i<(int)#####.size(); i++){
        double temp = calculatedistfast(#####[0], #####[i]);
        if(temp < arm1Len){
            arm1Len = temp;
        }
    }
    for(int i=permLength; i<(int)#####.size(); i++){
        double temp = calculatedistfast(#####[permLength-1], #####[i]);
        if(temp < arm2Len){
            arm2Len = temp;
        }
    }
    ##### += ##### + arm1Len + arm2Len;
    bool promise = ##### < fast_dist;
    /* for (size_t i = 0; i < #####.size(); ++i){
        cout << setw(2) << #####[i] << ' ';
    }
    cout << setw(4) << permLength << setw(10) << #####;
    cout << setw(10) << arm1Len << setw(10) << arm2Len; */
    if(promise){
        //cout << setw(10) << ##### << setw(10) << ##### << "  " << "true" << '\n';
        if(#####==0){
            //cout << "New best cost achieved: " << ##### << "\n";
            fasttsp_tour = #####;
            fast_dist = #####;
        }
    }
    //else cout << setw(10) << ##### << setw(10) << ##### << "  " << "false" << '\n';
    return promise;
}

void genPerms(vector<int> #####, int permLength) { //permlength = how many indices are fixed
    if (permLength == (int)#####.size()) {
        // Do something with the #####
        //##### += (closing edge);
        //check if it's better
            //update things
        //##### -= (closing edge);
        double ##### = 0;
        for (int i = 0; i < permLength - 1; ++i) {
            ##### += calculatedist(#####[i], #####[i + 1]);
        }
        ##### += calculatedist(#####[permLength - 1], #####[0]);  // Return to the starting city
        if (##### < fast_dist) {
            fast_dist = #####;
            fasttsp_tour = #####;
        }
        return;
    }  // if ..complete #####
    

    if (!promising(#####, permLength)) {
        return;
    }  // if ..not promising

    for (size_t i = permLength; i < #####.size(); ++i) {
        swap(#####[permLength], #####[i]);
        //##### += (cost of new edge);
        genPerms(#####, permLength + 1);
        //##### += (cost of that same edge);
        swap(#####[permLength], #####[i]);
    }  // for ..unpermuted elements
}  // genPerms()

void opttsp(){
    std::vector<int> indices(#####);  // Create a vector of the required size
    /* for(int i = 0; i < #####; ++i) {
        indices[i] = i;  // Fill the vector with increasing indices
    } */

    fasttsp();
    
    reverse(fasttsp_tour.begin()+1, fasttsp_tour.end());
    
    genPerms(fasttsp_tour, 1);
    cout << fast_dist << "\n";
    
    if((int)fasttsp_tour.size() != 0){
        for(int i=0; i< (int)fasttsp_tour.size(); i++){
            cout << fasttsp_tour[i] << " ";
        }
    }
    else{
        for(int i=0; i< (int)fasttsp_tour.size(); i++){
            cout << fasttsp_tour[i] << " ";
        }
    }

}

int main(int argc, char * argv[]) {
    cout << std::setprecision(2);
    cout << std::fixed;
    //cerr << fixed << showpoint << setprecision(2) << boolalpha;
	struct option longOpts[] = {
		{"help",no_argument,NULL,'h'},
		{"mode",required_argument,NULL,'m'},
		{NULL,0,NULL,0}
	};
    
	opterr = 1;
	int opt = 0, index = 0;
	while ((opt = getopt_long(argc,argv,"hm:",longOpts,&index)) != -1) {
		switch (opt) {
			case 'h':
				cout << "help flag\n";
				return 0;
			case 'm':
                if (optarg[0] == 'M') {
                    MST = true;
                }
                else if((optarg[0]=='F')) {
                    fast = true;
                }
                else{
                    optimal = true;
                }
				break;
			default:
                cout << "default error\n";
				exit(1);
		}
	}
	fill();
    
    if(MST){
        mst();
    }
    else if(fast){
        fasttsp();
    }
    else if(optimal){
        opttsp();
    }

	return 0;
}
